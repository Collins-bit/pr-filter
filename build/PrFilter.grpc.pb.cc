// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PrFilter.proto

#include "PrFilter.pb.h"
#include "PrFilter.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace PrFilter {

static const char* PrFilterService_method_names[] = {
  "/PrFilter.PrFilterService/SetupEmmt",
  "/PrFilter.PrFilterService/SetupXset",
  "/PrFilter.PrFilterService/Search",
};

std::unique_ptr< PrFilterService::Stub> PrFilterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PrFilterService::Stub> stub(new PrFilterService::Stub(channel, options));
  return stub;
}

PrFilterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetupEmmt_(PrFilterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetupXset_(PrFilterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(PrFilterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PrFilterService::Stub::SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::PrFilter::SetupEmmtRespone* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetupEmmt_, context, request, response);
}

void PrFilterService::Stub::async::SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupEmmt_, context, request, response, std::move(f));
}

void PrFilterService::Stub::async::SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupEmmt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>* PrFilterService::Stub::PrepareAsyncSetupEmmtRaw(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PrFilter::SetupEmmtRespone, ::PrFilter::SetupEmmtRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetupEmmt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>* PrFilterService::Stub::AsyncSetupEmmtRaw(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupEmmtRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PrFilterService::Stub::SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::PrFilter::SetupXsetRespone* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetupXset_, context, request, response);
}

void PrFilterService::Stub::async::SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupXset_, context, request, response, std::move(f));
}

void PrFilterService::Stub::async::SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetupXset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>* PrFilterService::Stub::PrepareAsyncSetupXsetRaw(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PrFilter::SetupXsetRespone, ::PrFilter::SetupXsetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetupXset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>* PrFilterService::Stub::AsyncSetupXsetRaw(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetupXsetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PrFilterService::Stub::Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::PrFilter::SearchRespone* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PrFilter::SearchRequest, ::PrFilter::SearchRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Search_, context, request, response);
}

void PrFilterService::Stub::async::Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PrFilter::SearchRequest, ::PrFilter::SearchRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

void PrFilterService::Stub::async::Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>* PrFilterService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::PrFilter::SearchRespone, ::PrFilter::SearchRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>* PrFilterService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

PrFilterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrFilterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrFilterService::Service, ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PrFilterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PrFilter::SetupEmmtRequest* req,
             ::PrFilter::SetupEmmtRespone* resp) {
               return service->SetupEmmt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrFilterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrFilterService::Service, ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PrFilterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PrFilter::SetupXsetRequest* req,
             ::PrFilter::SetupXsetRespone* resp) {
               return service->SetupXset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PrFilterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PrFilterService::Service, ::PrFilter::SearchRequest, ::PrFilter::SearchRespone, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PrFilterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PrFilter::SearchRequest* req,
             ::PrFilter::SearchRespone* resp) {
               return service->Search(ctx, req, resp);
             }, this)));
}

PrFilterService::Service::~Service() {
}

::grpc::Status PrFilterService::Service::SetupEmmt(::grpc::ServerContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PrFilterService::Service::SetupXset(::grpc::ServerContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PrFilterService::Service::Search(::grpc::ServerContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace PrFilter

