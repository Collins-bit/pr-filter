// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PrFilter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PrFilter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PrFilter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PrFilter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PrFilter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PrFilter_2eproto;
namespace PrFilter {
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchRespone;
struct SearchResponeDefaultTypeInternal;
extern SearchResponeDefaultTypeInternal _SearchRespone_default_instance_;
class SetupEmmtRequest;
struct SetupEmmtRequestDefaultTypeInternal;
extern SetupEmmtRequestDefaultTypeInternal _SetupEmmtRequest_default_instance_;
class SetupEmmtRespone;
struct SetupEmmtResponeDefaultTypeInternal;
extern SetupEmmtResponeDefaultTypeInternal _SetupEmmtRespone_default_instance_;
class SetupXsetRequest;
struct SetupXsetRequestDefaultTypeInternal;
extern SetupXsetRequestDefaultTypeInternal _SetupXsetRequest_default_instance_;
class SetupXsetRespone;
struct SetupXsetResponeDefaultTypeInternal;
extern SetupXsetResponeDefaultTypeInternal _SetupXsetRespone_default_instance_;
class cbc;
struct cbcDefaultTypeInternal;
extern cbcDefaultTypeInternal _cbc_default_instance_;
class key_re_d;
struct key_re_dDefaultTypeInternal;
extern key_re_dDefaultTypeInternal _key_re_d_default_instance_;
}  // namespace PrFilter
PROTOBUF_NAMESPACE_OPEN
template<> ::PrFilter::SearchRequest* Arena::CreateMaybeMessage<::PrFilter::SearchRequest>(Arena*);
template<> ::PrFilter::SearchRespone* Arena::CreateMaybeMessage<::PrFilter::SearchRespone>(Arena*);
template<> ::PrFilter::SetupEmmtRequest* Arena::CreateMaybeMessage<::PrFilter::SetupEmmtRequest>(Arena*);
template<> ::PrFilter::SetupEmmtRespone* Arena::CreateMaybeMessage<::PrFilter::SetupEmmtRespone>(Arena*);
template<> ::PrFilter::SetupXsetRequest* Arena::CreateMaybeMessage<::PrFilter::SetupXsetRequest>(Arena*);
template<> ::PrFilter::SetupXsetRespone* Arena::CreateMaybeMessage<::PrFilter::SetupXsetRespone>(Arena*);
template<> ::PrFilter::cbc* Arena::CreateMaybeMessage<::PrFilter::cbc>(Arena*);
template<> ::PrFilter::key_re_d* Arena::CreateMaybeMessage<::PrFilter::key_re_d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PrFilter {

// ===================================================================

class cbc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.cbc) */ {
 public:
  inline cbc() : cbc(nullptr) {}
  ~cbc() override;
  explicit PROTOBUF_CONSTEXPR cbc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  cbc(const cbc& from);
  cbc(cbc&& from) noexcept
    : cbc() {
    *this = ::std::move(from);
  }

  inline cbc& operator=(const cbc& from) {
    CopyFrom(from);
    return *this;
  }
  inline cbc& operator=(cbc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const cbc& default_instance() {
    return *internal_default_instance();
  }
  static inline const cbc* internal_default_instance() {
    return reinterpret_cast<const cbc*>(
               &_cbc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(cbc& a, cbc& b) {
    a.Swap(&b);
  }
  inline void Swap(cbc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cbc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  cbc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<cbc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const cbc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const cbc& from) {
    cbc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cbc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.cbc";
  }
  protected:
  explicit cbc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
    kBcFieldNumber = 2,
  };
  // repeated bytes c = 1;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  const std::string& c(int index) const;
  std::string* mutable_c(int index);
  void set_c(int index, const std::string& value);
  void set_c(int index, std::string&& value);
  void set_c(int index, const char* value);
  void set_c(int index, const void* value, size_t size);
  std::string* add_c();
  void add_c(const std::string& value);
  void add_c(std::string&& value);
  void add_c(const char* value);
  void add_c(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& c() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_c();
  private:
  const std::string& _internal_c(int index) const;
  std::string* _internal_add_c();
  public:

  // repeated bytes bc = 2;
  int bc_size() const;
  private:
  int _internal_bc_size() const;
  public:
  void clear_bc();
  const std::string& bc(int index) const;
  std::string* mutable_bc(int index);
  void set_bc(int index, const std::string& value);
  void set_bc(int index, std::string&& value);
  void set_bc(int index, const char* value);
  void set_bc(int index, const void* value, size_t size);
  std::string* add_bc();
  void add_bc(const std::string& value);
  void add_bc(std::string&& value);
  void add_bc(const char* value);
  void add_bc(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bc();
  private:
  const std::string& _internal_bc(int index) const;
  std::string* _internal_add_bc();
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.cbc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> c_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class key_re_d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.key_re_d) */ {
 public:
  inline key_re_d() : key_re_d(nullptr) {}
  ~key_re_d() override;
  explicit PROTOBUF_CONSTEXPR key_re_d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  key_re_d(const key_re_d& from);
  key_re_d(key_re_d&& from) noexcept
    : key_re_d() {
    *this = ::std::move(from);
  }

  inline key_re_d& operator=(const key_re_d& from) {
    CopyFrom(from);
    return *this;
  }
  inline key_re_d& operator=(key_re_d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const key_re_d& default_instance() {
    return *internal_default_instance();
  }
  static inline const key_re_d* internal_default_instance() {
    return reinterpret_cast<const key_re_d*>(
               &_key_re_d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(key_re_d& a, key_re_d& b) {
    a.Swap(&b);
  }
  inline void Swap(key_re_d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(key_re_d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  key_re_d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<key_re_d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const key_re_d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const key_re_d& from) {
    key_re_d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(key_re_d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.key_re_d";
  }
  protected:
  explicit key_re_d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCkFieldNumber = 2,
    kP2FieldNumber = 3,
    kP2PlusFieldNumber = 4,
    kKxFieldNumber = 1,
    kKeyPhiFieldNumber = 5,
    kKeyPhiPlusFieldNumber = 6,
  };
  // repeated int32 ck = 2;
  int ck_size() const;
  private:
  int _internal_ck_size() const;
  public:
  void clear_ck();
  private:
  int32_t _internal_ck(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ck() const;
  void _internal_add_ck(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ck();
  public:
  int32_t ck(int index) const;
  void set_ck(int index, int32_t value);
  void add_ck(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ck() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ck();

  // repeated int32 p2 = 3;
  int p2_size() const;
  private:
  int _internal_p2_size() const;
  public:
  void clear_p2();
  private:
  int32_t _internal_p2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_p2() const;
  void _internal_add_p2(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_p2();
  public:
  int32_t p2(int index) const;
  void set_p2(int index, int32_t value);
  void add_p2(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      p2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_p2();

  // repeated int32 p2_plus = 4;
  int p2_plus_size() const;
  private:
  int _internal_p2_plus_size() const;
  public:
  void clear_p2_plus();
  private:
  int32_t _internal_p2_plus(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_p2_plus() const;
  void _internal_add_p2_plus(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_p2_plus();
  public:
  int32_t p2_plus(int index) const;
  void set_p2_plus(int index, int32_t value);
  void add_p2_plus(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      p2_plus() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_p2_plus();

  // string kx = 1;
  void clear_kx();
  const std::string& kx() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kx(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kx();
  PROTOBUF_NODISCARD std::string* release_kx();
  void set_allocated_kx(std::string* kx);
  private:
  const std::string& _internal_kx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kx(const std::string& value);
  std::string* _internal_mutable_kx();
  public:

  // string key_phi = 5;
  void clear_key_phi();
  const std::string& key_phi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_phi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_phi();
  PROTOBUF_NODISCARD std::string* release_key_phi();
  void set_allocated_key_phi(std::string* key_phi);
  private:
  const std::string& _internal_key_phi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_phi(const std::string& value);
  std::string* _internal_mutable_key_phi();
  public:

  // string key_phi_plus = 6;
  void clear_key_phi_plus();
  const std::string& key_phi_plus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_phi_plus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_phi_plus();
  PROTOBUF_NODISCARD std::string* release_key_phi_plus();
  void set_allocated_key_phi_plus(std::string* key_phi_plus);
  private:
  const std::string& _internal_key_phi_plus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_phi_plus(const std::string& value);
  std::string* _internal_mutable_key_phi_plus();
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.key_re_d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ck_;
    mutable std::atomic<int> _ck_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > p2_;
    mutable std::atomic<int> _p2_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > p2_plus_;
    mutable std::atomic<int> _p2_plus_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kx_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_phi_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_phi_plus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class SetupEmmtRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.SetupEmmtRequest) */ {
 public:
  inline SetupEmmtRequest() : SetupEmmtRequest(nullptr) {}
  ~SetupEmmtRequest() override;
  explicit PROTOBUF_CONSTEXPR SetupEmmtRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupEmmtRequest(const SetupEmmtRequest& from);
  SetupEmmtRequest(SetupEmmtRequest&& from) noexcept
    : SetupEmmtRequest() {
    *this = ::std::move(from);
  }

  inline SetupEmmtRequest& operator=(const SetupEmmtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupEmmtRequest& operator=(SetupEmmtRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupEmmtRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupEmmtRequest* internal_default_instance() {
    return reinterpret_cast<const SetupEmmtRequest*>(
               &_SetupEmmtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetupEmmtRequest& a, SetupEmmtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupEmmtRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupEmmtRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupEmmtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupEmmtRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupEmmtRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetupEmmtRequest& from) {
    SetupEmmtRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupEmmtRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.SetupEmmtRequest";
  }
  protected:
  explicit SetupEmmtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .PrFilter.cbc value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PrFilter::cbc& value() const;
  PROTOBUF_NODISCARD ::PrFilter::cbc* release_value();
  ::PrFilter::cbc* mutable_value();
  void set_allocated_value(::PrFilter::cbc* value);
  private:
  const ::PrFilter::cbc& _internal_value() const;
  ::PrFilter::cbc* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PrFilter::cbc* value);
  ::PrFilter::cbc* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:PrFilter.SetupEmmtRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PrFilter::cbc* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class SetupEmmtRespone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.SetupEmmtRespone) */ {
 public:
  inline SetupEmmtRespone() : SetupEmmtRespone(nullptr) {}
  ~SetupEmmtRespone() override;
  explicit PROTOBUF_CONSTEXPR SetupEmmtRespone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupEmmtRespone(const SetupEmmtRespone& from);
  SetupEmmtRespone(SetupEmmtRespone&& from) noexcept
    : SetupEmmtRespone() {
    *this = ::std::move(from);
  }

  inline SetupEmmtRespone& operator=(const SetupEmmtRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupEmmtRespone& operator=(SetupEmmtRespone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupEmmtRespone& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupEmmtRespone* internal_default_instance() {
    return reinterpret_cast<const SetupEmmtRespone*>(
               &_SetupEmmtRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetupEmmtRespone& a, SetupEmmtRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupEmmtRespone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupEmmtRespone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupEmmtRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupEmmtRespone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupEmmtRespone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetupEmmtRespone& from) {
    SetupEmmtRespone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupEmmtRespone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.SetupEmmtRespone";
  }
  protected:
  explicit SetupEmmtRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.SetupEmmtRespone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class SetupXsetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.SetupXsetRequest) */ {
 public:
  inline SetupXsetRequest() : SetupXsetRequest(nullptr) {}
  ~SetupXsetRequest() override;
  explicit PROTOBUF_CONSTEXPR SetupXsetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupXsetRequest(const SetupXsetRequest& from);
  SetupXsetRequest(SetupXsetRequest&& from) noexcept
    : SetupXsetRequest() {
    *this = ::std::move(from);
  }

  inline SetupXsetRequest& operator=(const SetupXsetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupXsetRequest& operator=(SetupXsetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupXsetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupXsetRequest* internal_default_instance() {
    return reinterpret_cast<const SetupXsetRequest*>(
               &_SetupXsetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetupXsetRequest& a, SetupXsetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupXsetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupXsetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupXsetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupXsetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupXsetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetupXsetRequest& from) {
    SetupXsetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupXsetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.SetupXsetRequest";
  }
  protected:
  explicit SetupXsetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXsetVFieldNumber = 1,
  };
  // bytes xset_v = 1;
  void clear_xset_v();
  const std::string& xset_v() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xset_v(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xset_v();
  PROTOBUF_NODISCARD std::string* release_xset_v();
  void set_allocated_xset_v(std::string* xset_v);
  private:
  const std::string& _internal_xset_v() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xset_v(const std::string& value);
  std::string* _internal_mutable_xset_v();
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.SetupXsetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xset_v_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class SetupXsetRespone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.SetupXsetRespone) */ {
 public:
  inline SetupXsetRespone() : SetupXsetRespone(nullptr) {}
  ~SetupXsetRespone() override;
  explicit PROTOBUF_CONSTEXPR SetupXsetRespone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetupXsetRespone(const SetupXsetRespone& from);
  SetupXsetRespone(SetupXsetRespone&& from) noexcept
    : SetupXsetRespone() {
    *this = ::std::move(from);
  }

  inline SetupXsetRespone& operator=(const SetupXsetRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupXsetRespone& operator=(SetupXsetRespone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupXsetRespone& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupXsetRespone* internal_default_instance() {
    return reinterpret_cast<const SetupXsetRespone*>(
               &_SetupXsetRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetupXsetRespone& a, SetupXsetRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupXsetRespone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupXsetRespone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupXsetRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupXsetRespone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetupXsetRespone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetupXsetRespone& from) {
    SetupXsetRespone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupXsetRespone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.SetupXsetRespone";
  }
  protected:
  explicit SetupXsetRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.SetupXsetRespone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokpVecFieldNumber = 3,
    kTokpFieldNumber = 1,
    kKW12EncFieldNumber = 2,
  };
  // repeated .PrFilter.key_re_d tokp_vec = 3;
  int tokp_vec_size() const;
  private:
  int _internal_tokp_vec_size() const;
  public:
  void clear_tokp_vec();
  ::PrFilter::key_re_d* mutable_tokp_vec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrFilter::key_re_d >*
      mutable_tokp_vec();
  private:
  const ::PrFilter::key_re_d& _internal_tokp_vec(int index) const;
  ::PrFilter::key_re_d* _internal_add_tokp_vec();
  public:
  const ::PrFilter::key_re_d& tokp_vec(int index) const;
  ::PrFilter::key_re_d* add_tokp_vec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrFilter::key_re_d >&
      tokp_vec() const;

  // string tokp = 1;
  void clear_tokp();
  const std::string& tokp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tokp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tokp();
  PROTOBUF_NODISCARD std::string* release_tokp();
  void set_allocated_tokp(std::string* tokp);
  private:
  const std::string& _internal_tokp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tokp(const std::string& value);
  std::string* _internal_mutable_tokp();
  public:

  // string k_w12_enc = 2;
  void clear_k_w12_enc();
  const std::string& k_w12_enc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_k_w12_enc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_k_w12_enc();
  PROTOBUF_NODISCARD std::string* release_k_w12_enc();
  void set_allocated_k_w12_enc(std::string* k_w12_enc);
  private:
  const std::string& _internal_k_w12_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_k_w12_enc(const std::string& value);
  std::string* _internal_mutable_k_w12_enc();
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrFilter::key_re_d > tokp_vec_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr k_w12_enc_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// -------------------------------------------------------------------

class SearchRespone final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrFilter.SearchRespone) */ {
 public:
  inline SearchRespone() : SearchRespone(nullptr) {}
  ~SearchRespone() override;
  explicit PROTOBUF_CONSTEXPR SearchRespone(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRespone(const SearchRespone& from);
  SearchRespone(SearchRespone&& from) noexcept
    : SearchRespone() {
    *this = ::std::move(from);
  }

  inline SearchRespone& operator=(const SearchRespone& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRespone& operator=(SearchRespone&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRespone& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRespone* internal_default_instance() {
    return reinterpret_cast<const SearchRespone*>(
               &_SearchRespone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SearchRespone& a, SearchRespone& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRespone* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRespone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRespone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRespone>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRespone& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRespone& from) {
    SearchRespone::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRespone* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrFilter.SearchRespone";
  }
  protected:
  explicit SearchRespone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PrFilter.SearchRespone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PrFilter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// cbc

// repeated bytes c = 1;
inline int cbc::_internal_c_size() const {
  return _impl_.c_.size();
}
inline int cbc::c_size() const {
  return _internal_c_size();
}
inline void cbc::clear_c() {
  _impl_.c_.Clear();
}
inline std::string* cbc::add_c() {
  std::string* _s = _internal_add_c();
  // @@protoc_insertion_point(field_add_mutable:PrFilter.cbc.c)
  return _s;
}
inline const std::string& cbc::_internal_c(int index) const {
  return _impl_.c_.Get(index);
}
inline const std::string& cbc::c(int index) const {
  // @@protoc_insertion_point(field_get:PrFilter.cbc.c)
  return _internal_c(index);
}
inline std::string* cbc::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:PrFilter.cbc.c)
  return _impl_.c_.Mutable(index);
}
inline void cbc::set_c(int index, const std::string& value) {
  _impl_.c_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PrFilter.cbc.c)
}
inline void cbc::set_c(int index, std::string&& value) {
  _impl_.c_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PrFilter.cbc.c)
}
inline void cbc::set_c(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.c_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PrFilter.cbc.c)
}
inline void cbc::set_c(int index, const void* value, size_t size) {
  _impl_.c_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PrFilter.cbc.c)
}
inline std::string* cbc::_internal_add_c() {
  return _impl_.c_.Add();
}
inline void cbc::add_c(const std::string& value) {
  _impl_.c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PrFilter.cbc.c)
}
inline void cbc::add_c(std::string&& value) {
  _impl_.c_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PrFilter.cbc.c)
}
inline void cbc::add_c(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.c_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PrFilter.cbc.c)
}
inline void cbc::add_c(const void* value, size_t size) {
  _impl_.c_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PrFilter.cbc.c)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
cbc::c() const {
  // @@protoc_insertion_point(field_list:PrFilter.cbc.c)
  return _impl_.c_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
cbc::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:PrFilter.cbc.c)
  return &_impl_.c_;
}

// repeated bytes bc = 2;
inline int cbc::_internal_bc_size() const {
  return _impl_.bc_.size();
}
inline int cbc::bc_size() const {
  return _internal_bc_size();
}
inline void cbc::clear_bc() {
  _impl_.bc_.Clear();
}
inline std::string* cbc::add_bc() {
  std::string* _s = _internal_add_bc();
  // @@protoc_insertion_point(field_add_mutable:PrFilter.cbc.bc)
  return _s;
}
inline const std::string& cbc::_internal_bc(int index) const {
  return _impl_.bc_.Get(index);
}
inline const std::string& cbc::bc(int index) const {
  // @@protoc_insertion_point(field_get:PrFilter.cbc.bc)
  return _internal_bc(index);
}
inline std::string* cbc::mutable_bc(int index) {
  // @@protoc_insertion_point(field_mutable:PrFilter.cbc.bc)
  return _impl_.bc_.Mutable(index);
}
inline void cbc::set_bc(int index, const std::string& value) {
  _impl_.bc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PrFilter.cbc.bc)
}
inline void cbc::set_bc(int index, std::string&& value) {
  _impl_.bc_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PrFilter.cbc.bc)
}
inline void cbc::set_bc(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bc_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PrFilter.cbc.bc)
}
inline void cbc::set_bc(int index, const void* value, size_t size) {
  _impl_.bc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PrFilter.cbc.bc)
}
inline std::string* cbc::_internal_add_bc() {
  return _impl_.bc_.Add();
}
inline void cbc::add_bc(const std::string& value) {
  _impl_.bc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PrFilter.cbc.bc)
}
inline void cbc::add_bc(std::string&& value) {
  _impl_.bc_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PrFilter.cbc.bc)
}
inline void cbc::add_bc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.bc_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PrFilter.cbc.bc)
}
inline void cbc::add_bc(const void* value, size_t size) {
  _impl_.bc_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PrFilter.cbc.bc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
cbc::bc() const {
  // @@protoc_insertion_point(field_list:PrFilter.cbc.bc)
  return _impl_.bc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
cbc::mutable_bc() {
  // @@protoc_insertion_point(field_mutable_list:PrFilter.cbc.bc)
  return &_impl_.bc_;
}

// -------------------------------------------------------------------

// key_re_d

// string kx = 1;
inline void key_re_d::clear_kx() {
  _impl_.kx_.ClearToEmpty();
}
inline const std::string& key_re_d::kx() const {
  // @@protoc_insertion_point(field_get:PrFilter.key_re_d.kx)
  return _internal_kx();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void key_re_d::set_kx(ArgT0&& arg0, ArgT... args) {
 
 _impl_.kx_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.key_re_d.kx)
}
inline std::string* key_re_d::mutable_kx() {
  std::string* _s = _internal_mutable_kx();
  // @@protoc_insertion_point(field_mutable:PrFilter.key_re_d.kx)
  return _s;
}
inline const std::string& key_re_d::_internal_kx() const {
  return _impl_.kx_.Get();
}
inline void key_re_d::_internal_set_kx(const std::string& value) {
  
  _impl_.kx_.Set(value, GetArenaForAllocation());
}
inline std::string* key_re_d::_internal_mutable_kx() {
  
  return _impl_.kx_.Mutable(GetArenaForAllocation());
}
inline std::string* key_re_d::release_kx() {
  // @@protoc_insertion_point(field_release:PrFilter.key_re_d.kx)
  return _impl_.kx_.Release();
}
inline void key_re_d::set_allocated_kx(std::string* kx) {
  if (kx != nullptr) {
    
  } else {
    
  }
  _impl_.kx_.SetAllocated(kx, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.kx_.IsDefault()) {
    _impl_.kx_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.key_re_d.kx)
}

// repeated int32 ck = 2;
inline int key_re_d::_internal_ck_size() const {
  return _impl_.ck_.size();
}
inline int key_re_d::ck_size() const {
  return _internal_ck_size();
}
inline void key_re_d::clear_ck() {
  _impl_.ck_.Clear();
}
inline int32_t key_re_d::_internal_ck(int index) const {
  return _impl_.ck_.Get(index);
}
inline int32_t key_re_d::ck(int index) const {
  // @@protoc_insertion_point(field_get:PrFilter.key_re_d.ck)
  return _internal_ck(index);
}
inline void key_re_d::set_ck(int index, int32_t value) {
  _impl_.ck_.Set(index, value);
  // @@protoc_insertion_point(field_set:PrFilter.key_re_d.ck)
}
inline void key_re_d::_internal_add_ck(int32_t value) {
  _impl_.ck_.Add(value);
}
inline void key_re_d::add_ck(int32_t value) {
  _internal_add_ck(value);
  // @@protoc_insertion_point(field_add:PrFilter.key_re_d.ck)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
key_re_d::_internal_ck() const {
  return _impl_.ck_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
key_re_d::ck() const {
  // @@protoc_insertion_point(field_list:PrFilter.key_re_d.ck)
  return _internal_ck();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
key_re_d::_internal_mutable_ck() {
  return &_impl_.ck_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
key_re_d::mutable_ck() {
  // @@protoc_insertion_point(field_mutable_list:PrFilter.key_re_d.ck)
  return _internal_mutable_ck();
}

// repeated int32 p2 = 3;
inline int key_re_d::_internal_p2_size() const {
  return _impl_.p2_.size();
}
inline int key_re_d::p2_size() const {
  return _internal_p2_size();
}
inline void key_re_d::clear_p2() {
  _impl_.p2_.Clear();
}
inline int32_t key_re_d::_internal_p2(int index) const {
  return _impl_.p2_.Get(index);
}
inline int32_t key_re_d::p2(int index) const {
  // @@protoc_insertion_point(field_get:PrFilter.key_re_d.p2)
  return _internal_p2(index);
}
inline void key_re_d::set_p2(int index, int32_t value) {
  _impl_.p2_.Set(index, value);
  // @@protoc_insertion_point(field_set:PrFilter.key_re_d.p2)
}
inline void key_re_d::_internal_add_p2(int32_t value) {
  _impl_.p2_.Add(value);
}
inline void key_re_d::add_p2(int32_t value) {
  _internal_add_p2(value);
  // @@protoc_insertion_point(field_add:PrFilter.key_re_d.p2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
key_re_d::_internal_p2() const {
  return _impl_.p2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
key_re_d::p2() const {
  // @@protoc_insertion_point(field_list:PrFilter.key_re_d.p2)
  return _internal_p2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
key_re_d::_internal_mutable_p2() {
  return &_impl_.p2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
key_re_d::mutable_p2() {
  // @@protoc_insertion_point(field_mutable_list:PrFilter.key_re_d.p2)
  return _internal_mutable_p2();
}

// repeated int32 p2_plus = 4;
inline int key_re_d::_internal_p2_plus_size() const {
  return _impl_.p2_plus_.size();
}
inline int key_re_d::p2_plus_size() const {
  return _internal_p2_plus_size();
}
inline void key_re_d::clear_p2_plus() {
  _impl_.p2_plus_.Clear();
}
inline int32_t key_re_d::_internal_p2_plus(int index) const {
  return _impl_.p2_plus_.Get(index);
}
inline int32_t key_re_d::p2_plus(int index) const {
  // @@protoc_insertion_point(field_get:PrFilter.key_re_d.p2_plus)
  return _internal_p2_plus(index);
}
inline void key_re_d::set_p2_plus(int index, int32_t value) {
  _impl_.p2_plus_.Set(index, value);
  // @@protoc_insertion_point(field_set:PrFilter.key_re_d.p2_plus)
}
inline void key_re_d::_internal_add_p2_plus(int32_t value) {
  _impl_.p2_plus_.Add(value);
}
inline void key_re_d::add_p2_plus(int32_t value) {
  _internal_add_p2_plus(value);
  // @@protoc_insertion_point(field_add:PrFilter.key_re_d.p2_plus)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
key_re_d::_internal_p2_plus() const {
  return _impl_.p2_plus_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
key_re_d::p2_plus() const {
  // @@protoc_insertion_point(field_list:PrFilter.key_re_d.p2_plus)
  return _internal_p2_plus();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
key_re_d::_internal_mutable_p2_plus() {
  return &_impl_.p2_plus_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
key_re_d::mutable_p2_plus() {
  // @@protoc_insertion_point(field_mutable_list:PrFilter.key_re_d.p2_plus)
  return _internal_mutable_p2_plus();
}

// string key_phi = 5;
inline void key_re_d::clear_key_phi() {
  _impl_.key_phi_.ClearToEmpty();
}
inline const std::string& key_re_d::key_phi() const {
  // @@protoc_insertion_point(field_get:PrFilter.key_re_d.key_phi)
  return _internal_key_phi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void key_re_d::set_key_phi(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_phi_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.key_re_d.key_phi)
}
inline std::string* key_re_d::mutable_key_phi() {
  std::string* _s = _internal_mutable_key_phi();
  // @@protoc_insertion_point(field_mutable:PrFilter.key_re_d.key_phi)
  return _s;
}
inline const std::string& key_re_d::_internal_key_phi() const {
  return _impl_.key_phi_.Get();
}
inline void key_re_d::_internal_set_key_phi(const std::string& value) {
  
  _impl_.key_phi_.Set(value, GetArenaForAllocation());
}
inline std::string* key_re_d::_internal_mutable_key_phi() {
  
  return _impl_.key_phi_.Mutable(GetArenaForAllocation());
}
inline std::string* key_re_d::release_key_phi() {
  // @@protoc_insertion_point(field_release:PrFilter.key_re_d.key_phi)
  return _impl_.key_phi_.Release();
}
inline void key_re_d::set_allocated_key_phi(std::string* key_phi) {
  if (key_phi != nullptr) {
    
  } else {
    
  }
  _impl_.key_phi_.SetAllocated(key_phi, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_phi_.IsDefault()) {
    _impl_.key_phi_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.key_re_d.key_phi)
}

// string key_phi_plus = 6;
inline void key_re_d::clear_key_phi_plus() {
  _impl_.key_phi_plus_.ClearToEmpty();
}
inline const std::string& key_re_d::key_phi_plus() const {
  // @@protoc_insertion_point(field_get:PrFilter.key_re_d.key_phi_plus)
  return _internal_key_phi_plus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void key_re_d::set_key_phi_plus(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_phi_plus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.key_re_d.key_phi_plus)
}
inline std::string* key_re_d::mutable_key_phi_plus() {
  std::string* _s = _internal_mutable_key_phi_plus();
  // @@protoc_insertion_point(field_mutable:PrFilter.key_re_d.key_phi_plus)
  return _s;
}
inline const std::string& key_re_d::_internal_key_phi_plus() const {
  return _impl_.key_phi_plus_.Get();
}
inline void key_re_d::_internal_set_key_phi_plus(const std::string& value) {
  
  _impl_.key_phi_plus_.Set(value, GetArenaForAllocation());
}
inline std::string* key_re_d::_internal_mutable_key_phi_plus() {
  
  return _impl_.key_phi_plus_.Mutable(GetArenaForAllocation());
}
inline std::string* key_re_d::release_key_phi_plus() {
  // @@protoc_insertion_point(field_release:PrFilter.key_re_d.key_phi_plus)
  return _impl_.key_phi_plus_.Release();
}
inline void key_re_d::set_allocated_key_phi_plus(std::string* key_phi_plus) {
  if (key_phi_plus != nullptr) {
    
  } else {
    
  }
  _impl_.key_phi_plus_.SetAllocated(key_phi_plus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_phi_plus_.IsDefault()) {
    _impl_.key_phi_plus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.key_re_d.key_phi_plus)
}

// -------------------------------------------------------------------

// SetupEmmtRequest

// bytes key = 1;
inline void SetupEmmtRequest::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SetupEmmtRequest::key() const {
  // @@protoc_insertion_point(field_get:PrFilter.SetupEmmtRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupEmmtRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.SetupEmmtRequest.key)
}
inline std::string* SetupEmmtRequest::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:PrFilter.SetupEmmtRequest.key)
  return _s;
}
inline const std::string& SetupEmmtRequest::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SetupEmmtRequest::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupEmmtRequest::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupEmmtRequest::release_key() {
  // @@protoc_insertion_point(field_release:PrFilter.SetupEmmtRequest.key)
  return _impl_.key_.Release();
}
inline void SetupEmmtRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.SetupEmmtRequest.key)
}

// .PrFilter.cbc value = 2;
inline bool SetupEmmtRequest::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool SetupEmmtRequest::has_value() const {
  return _internal_has_value();
}
inline void SetupEmmtRequest::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::PrFilter::cbc& SetupEmmtRequest::_internal_value() const {
  const ::PrFilter::cbc* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PrFilter::cbc&>(
      ::PrFilter::_cbc_default_instance_);
}
inline const ::PrFilter::cbc& SetupEmmtRequest::value() const {
  // @@protoc_insertion_point(field_get:PrFilter.SetupEmmtRequest.value)
  return _internal_value();
}
inline void SetupEmmtRequest::unsafe_arena_set_allocated_value(
    ::PrFilter::cbc* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PrFilter.SetupEmmtRequest.value)
}
inline ::PrFilter::cbc* SetupEmmtRequest::release_value() {
  
  ::PrFilter::cbc* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PrFilter::cbc* SetupEmmtRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:PrFilter.SetupEmmtRequest.value)
  
  ::PrFilter::cbc* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PrFilter::cbc* SetupEmmtRequest::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PrFilter::cbc>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PrFilter::cbc* SetupEmmtRequest::mutable_value() {
  ::PrFilter::cbc* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:PrFilter.SetupEmmtRequest.value)
  return _msg;
}
inline void SetupEmmtRequest::set_allocated_value(::PrFilter::cbc* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:PrFilter.SetupEmmtRequest.value)
}

// -------------------------------------------------------------------

// SetupEmmtRespone

// int32 code = 1;
inline void SetupEmmtRespone::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SetupEmmtRespone::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SetupEmmtRespone::code() const {
  // @@protoc_insertion_point(field_get:PrFilter.SetupEmmtRespone.code)
  return _internal_code();
}
inline void SetupEmmtRespone::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SetupEmmtRespone::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PrFilter.SetupEmmtRespone.code)
}

// -------------------------------------------------------------------

// SetupXsetRequest

// bytes xset_v = 1;
inline void SetupXsetRequest::clear_xset_v() {
  _impl_.xset_v_.ClearToEmpty();
}
inline const std::string& SetupXsetRequest::xset_v() const {
  // @@protoc_insertion_point(field_get:PrFilter.SetupXsetRequest.xset_v)
  return _internal_xset_v();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetupXsetRequest::set_xset_v(ArgT0&& arg0, ArgT... args) {
 
 _impl_.xset_v_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.SetupXsetRequest.xset_v)
}
inline std::string* SetupXsetRequest::mutable_xset_v() {
  std::string* _s = _internal_mutable_xset_v();
  // @@protoc_insertion_point(field_mutable:PrFilter.SetupXsetRequest.xset_v)
  return _s;
}
inline const std::string& SetupXsetRequest::_internal_xset_v() const {
  return _impl_.xset_v_.Get();
}
inline void SetupXsetRequest::_internal_set_xset_v(const std::string& value) {
  
  _impl_.xset_v_.Set(value, GetArenaForAllocation());
}
inline std::string* SetupXsetRequest::_internal_mutable_xset_v() {
  
  return _impl_.xset_v_.Mutable(GetArenaForAllocation());
}
inline std::string* SetupXsetRequest::release_xset_v() {
  // @@protoc_insertion_point(field_release:PrFilter.SetupXsetRequest.xset_v)
  return _impl_.xset_v_.Release();
}
inline void SetupXsetRequest::set_allocated_xset_v(std::string* xset_v) {
  if (xset_v != nullptr) {
    
  } else {
    
  }
  _impl_.xset_v_.SetAllocated(xset_v, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.xset_v_.IsDefault()) {
    _impl_.xset_v_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.SetupXsetRequest.xset_v)
}

// -------------------------------------------------------------------

// SetupXsetRespone

// int32 code = 1;
inline void SetupXsetRespone::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SetupXsetRespone::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SetupXsetRespone::code() const {
  // @@protoc_insertion_point(field_get:PrFilter.SetupXsetRespone.code)
  return _internal_code();
}
inline void SetupXsetRespone::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SetupXsetRespone::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PrFilter.SetupXsetRespone.code)
}

// -------------------------------------------------------------------

// SearchRequest

// string tokp = 1;
inline void SearchRequest::clear_tokp() {
  _impl_.tokp_.ClearToEmpty();
}
inline const std::string& SearchRequest::tokp() const {
  // @@protoc_insertion_point(field_get:PrFilter.SearchRequest.tokp)
  return _internal_tokp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_tokp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tokp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.SearchRequest.tokp)
}
inline std::string* SearchRequest::mutable_tokp() {
  std::string* _s = _internal_mutable_tokp();
  // @@protoc_insertion_point(field_mutable:PrFilter.SearchRequest.tokp)
  return _s;
}
inline const std::string& SearchRequest::_internal_tokp() const {
  return _impl_.tokp_.Get();
}
inline void SearchRequest::_internal_set_tokp(const std::string& value) {
  
  _impl_.tokp_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_tokp() {
  
  return _impl_.tokp_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_tokp() {
  // @@protoc_insertion_point(field_release:PrFilter.SearchRequest.tokp)
  return _impl_.tokp_.Release();
}
inline void SearchRequest::set_allocated_tokp(std::string* tokp) {
  if (tokp != nullptr) {
    
  } else {
    
  }
  _impl_.tokp_.SetAllocated(tokp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tokp_.IsDefault()) {
    _impl_.tokp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.SearchRequest.tokp)
}

// string k_w12_enc = 2;
inline void SearchRequest::clear_k_w12_enc() {
  _impl_.k_w12_enc_.ClearToEmpty();
}
inline const std::string& SearchRequest::k_w12_enc() const {
  // @@protoc_insertion_point(field_get:PrFilter.SearchRequest.k_w12_enc)
  return _internal_k_w12_enc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchRequest::set_k_w12_enc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.k_w12_enc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PrFilter.SearchRequest.k_w12_enc)
}
inline std::string* SearchRequest::mutable_k_w12_enc() {
  std::string* _s = _internal_mutable_k_w12_enc();
  // @@protoc_insertion_point(field_mutable:PrFilter.SearchRequest.k_w12_enc)
  return _s;
}
inline const std::string& SearchRequest::_internal_k_w12_enc() const {
  return _impl_.k_w12_enc_.Get();
}
inline void SearchRequest::_internal_set_k_w12_enc(const std::string& value) {
  
  _impl_.k_w12_enc_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_k_w12_enc() {
  
  return _impl_.k_w12_enc_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchRequest::release_k_w12_enc() {
  // @@protoc_insertion_point(field_release:PrFilter.SearchRequest.k_w12_enc)
  return _impl_.k_w12_enc_.Release();
}
inline void SearchRequest::set_allocated_k_w12_enc(std::string* k_w12_enc) {
  if (k_w12_enc != nullptr) {
    
  } else {
    
  }
  _impl_.k_w12_enc_.SetAllocated(k_w12_enc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.k_w12_enc_.IsDefault()) {
    _impl_.k_w12_enc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PrFilter.SearchRequest.k_w12_enc)
}

// repeated .PrFilter.key_re_d tokp_vec = 3;
inline int SearchRequest::_internal_tokp_vec_size() const {
  return _impl_.tokp_vec_.size();
}
inline int SearchRequest::tokp_vec_size() const {
  return _internal_tokp_vec_size();
}
inline void SearchRequest::clear_tokp_vec() {
  _impl_.tokp_vec_.Clear();
}
inline ::PrFilter::key_re_d* SearchRequest::mutable_tokp_vec(int index) {
  // @@protoc_insertion_point(field_mutable:PrFilter.SearchRequest.tokp_vec)
  return _impl_.tokp_vec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrFilter::key_re_d >*
SearchRequest::mutable_tokp_vec() {
  // @@protoc_insertion_point(field_mutable_list:PrFilter.SearchRequest.tokp_vec)
  return &_impl_.tokp_vec_;
}
inline const ::PrFilter::key_re_d& SearchRequest::_internal_tokp_vec(int index) const {
  return _impl_.tokp_vec_.Get(index);
}
inline const ::PrFilter::key_re_d& SearchRequest::tokp_vec(int index) const {
  // @@protoc_insertion_point(field_get:PrFilter.SearchRequest.tokp_vec)
  return _internal_tokp_vec(index);
}
inline ::PrFilter::key_re_d* SearchRequest::_internal_add_tokp_vec() {
  return _impl_.tokp_vec_.Add();
}
inline ::PrFilter::key_re_d* SearchRequest::add_tokp_vec() {
  ::PrFilter::key_re_d* _add = _internal_add_tokp_vec();
  // @@protoc_insertion_point(field_add:PrFilter.SearchRequest.tokp_vec)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrFilter::key_re_d >&
SearchRequest::tokp_vec() const {
  // @@protoc_insertion_point(field_list:PrFilter.SearchRequest.tokp_vec)
  return _impl_.tokp_vec_;
}

// -------------------------------------------------------------------

// SearchRespone

// int32 code = 1;
inline void SearchRespone::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SearchRespone::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SearchRespone::code() const {
  // @@protoc_insertion_point(field_get:PrFilter.SearchRespone.code)
  return _internal_code();
}
inline void SearchRespone::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SearchRespone::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:PrFilter.SearchRespone.code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PrFilter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PrFilter_2eproto
