// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PrFilter.proto
#ifndef GRPC_PrFilter_2eproto__INCLUDED
#define GRPC_PrFilter_2eproto__INCLUDED

#include "PrFilter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace PrFilter {

class PrFilterService final {
 public:
  static constexpr char const* service_full_name() {
    return "PrFilter.PrFilterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Setup Emmt
    virtual ::grpc::Status SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::PrFilter::SetupEmmtRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupEmmtRespone>> AsyncSetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupEmmtRespone>>(AsyncSetupEmmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupEmmtRespone>> PrepareAsyncSetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupEmmtRespone>>(PrepareAsyncSetupEmmtRaw(context, request, cq));
    }
    // Setup Xset
    virtual ::grpc::Status SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::PrFilter::SetupXsetRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupXsetRespone>> AsyncSetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupXsetRespone>>(AsyncSetupXsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupXsetRespone>> PrepareAsyncSetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupXsetRespone>>(PrepareAsyncSetupXsetRaw(context, request, cq));
    }
    // Search
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::PrFilter::SearchRespone* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SearchRespone>> AsyncSearch(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SearchRespone>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SearchRespone>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SearchRespone>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Setup Emmt
      virtual void SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Setup Xset
      virtual void SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Search
      virtual void Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupEmmtRespone>* AsyncSetupEmmtRaw(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupEmmtRespone>* PrepareAsyncSetupEmmtRaw(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupXsetRespone>* AsyncSetupXsetRaw(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SetupXsetRespone>* PrepareAsyncSetupXsetRaw(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SearchRespone>* AsyncSearchRaw(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::PrFilter::SearchRespone>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::PrFilter::SetupEmmtRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>> AsyncSetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>>(AsyncSetupEmmtRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>> PrepareAsyncSetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>>(PrepareAsyncSetupEmmtRaw(context, request, cq));
    }
    ::grpc::Status SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::PrFilter::SetupXsetRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>> AsyncSetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>>(AsyncSetupXsetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>> PrepareAsyncSetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>>(PrepareAsyncSetupXsetRaw(context, request, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::PrFilter::SearchRespone* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>> AsyncSearch(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response, std::function<void(::grpc::Status)>) override;
      void SetupEmmt(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response, std::function<void(::grpc::Status)>) override;
      void SetupXset(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>* AsyncSetupEmmtRaw(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupEmmtRespone>* PrepareAsyncSetupEmmtRaw(::grpc::ClientContext* context, const ::PrFilter::SetupEmmtRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>* AsyncSetupXsetRaw(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PrFilter::SetupXsetRespone>* PrepareAsyncSetupXsetRaw(::grpc::ClientContext* context, const ::PrFilter::SetupXsetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>* AsyncSearchRaw(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::PrFilter::SearchRespone>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::PrFilter::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetupEmmt_;
    const ::grpc::internal::RpcMethod rpcmethod_SetupXset_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Setup Emmt
    virtual ::grpc::Status SetupEmmt(::grpc::ServerContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response);
    // Setup Xset
    virtual ::grpc::Status SetupXset(::grpc::ServerContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response);
    // Search
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetupEmmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetupEmmt() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetupEmmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupEmmt(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetupEmmt(::grpc::ServerContext* context, ::PrFilter::SetupEmmtRequest* request, ::grpc::ServerAsyncResponseWriter< ::PrFilter::SetupEmmtRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetupXset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetupXset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetupXset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupXset(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetupXset(::grpc::ServerContext* context, ::PrFilter::SetupXsetRequest* request, ::grpc::ServerAsyncResponseWriter< ::PrFilter::SetupXsetRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::PrFilter::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::PrFilter::SearchRespone>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetupEmmt<WithAsyncMethod_SetupXset<WithAsyncMethod_Search<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetupEmmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetupEmmt() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::PrFilter::SetupEmmtRequest* request, ::PrFilter::SetupEmmtRespone* response) { return this->SetupEmmt(context, request, response); }));}
    void SetMessageAllocatorFor_SetupEmmt(
        ::grpc::MessageAllocator< ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetupEmmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupEmmt(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetupEmmt(
      ::grpc::CallbackServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetupXset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetupXset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::PrFilter::SetupXsetRequest* request, ::PrFilter::SetupXsetRespone* response) { return this->SetupXset(context, request, response); }));}
    void SetMessageAllocatorFor_SetupXset(
        ::grpc::MessageAllocator< ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetupXset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupXset(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetupXset(
      ::grpc::CallbackServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Search() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::PrFilter::SearchRequest, ::PrFilter::SearchRespone>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::PrFilter::SearchRequest* request, ::PrFilter::SearchRespone* response) { return this->Search(context, request, response); }));}
    void SetMessageAllocatorFor_Search(
        ::grpc::MessageAllocator< ::PrFilter::SearchRequest, ::PrFilter::SearchRespone>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::PrFilter::SearchRequest, ::PrFilter::SearchRespone>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetupEmmt<WithCallbackMethod_SetupXset<WithCallbackMethod_Search<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetupEmmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetupEmmt() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetupEmmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupEmmt(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetupXset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetupXset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetupXset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupXset(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetupEmmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetupEmmt() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetupEmmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupEmmt(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetupEmmt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetupXset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetupXset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetupXset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupXset(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetupXset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetupEmmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetupEmmt() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetupEmmt(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetupEmmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupEmmt(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetupEmmt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetupXset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetupXset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetupXset(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetupXset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetupXset(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetupXset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Search() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Search(context, request, response); }));
    }
    ~WithRawCallbackMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetupEmmt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetupEmmt() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::PrFilter::SetupEmmtRequest, ::PrFilter::SetupEmmtRespone>* streamer) {
                       return this->StreamedSetupEmmt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetupEmmt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetupEmmt(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupEmmtRequest* /*request*/, ::PrFilter::SetupEmmtRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetupEmmt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PrFilter::SetupEmmtRequest,::PrFilter::SetupEmmtRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetupXset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetupXset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::PrFilter::SetupXsetRequest, ::PrFilter::SetupXsetRespone>* streamer) {
                       return this->StreamedSetupXset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetupXset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetupXset(::grpc::ServerContext* /*context*/, const ::PrFilter::SetupXsetRequest* /*request*/, ::PrFilter::SetupXsetRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetupXset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PrFilter::SetupXsetRequest,::PrFilter::SetupXsetRespone>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::PrFilter::SearchRequest, ::PrFilter::SearchRespone>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::PrFilter::SearchRequest, ::PrFilter::SearchRespone>* streamer) {
                       return this->StreamedSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* /*context*/, const ::PrFilter::SearchRequest* /*request*/, ::PrFilter::SearchRespone* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::PrFilter::SearchRequest,::PrFilter::SearchRespone>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetupEmmt<WithStreamedUnaryMethod_SetupXset<WithStreamedUnaryMethod_Search<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetupEmmt<WithStreamedUnaryMethod_SetupXset<WithStreamedUnaryMethod_Search<Service > > > StreamedService;
};

}  // namespace PrFilter


#endif  // GRPC_PrFilter_2eproto__INCLUDED
